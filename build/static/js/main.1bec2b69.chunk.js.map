{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","console","log","label","important","className","content","onClick","request","axios","get","nonExistingNote","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","length","notesToShow","filter","map","key","find","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObject","Date","Math","random","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bec2b69.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  console.log(\"NOTE COMPONENT: \", note);\n  const label = note.important ? \"Make not important\" : \"Make important\";\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <br />\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getNotes = () => {\n  const request = axios.get(baseUrl);\n  const nonExistingNote = {\n    id: 1000,\n    content: \"Non existing note\",\n    date: \"2019-05-30T19:20:14.298Z\",\n    important: true,\n  };\n  return request.then((response) => {\n    return response.data.concat(nonExistingNote);\n  });\n};\n\nconst createNote = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => {\n    return response.data;\n  });\n};\n\nconst updateNote = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => {\n    return response.data;\n  });\n};\nexport default {\n  getNotes: getNotes,\n  createNote: createNote,\n  updateNote: updateNote,\n};\n","import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n  return <div className=\"error\">{message}</div>;\n};\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>The Note App.</em>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  // useEffect(() => {\n  //   console.log(\"Enter useEffect\");\n  //   noteService.getAllNotes().then((response) => {\n  //     console.log(\"After Response from Promise\");\n  //     setNotes(response.data);\n  //   });\n  // }, []);\n  const hook = () => {\n    console.log(\"Enter useEffect\");\n    noteService.getNotes().then((initialNotes) => {\n      console.log(\"After Response from Promise\");\n      setNotes(initialNotes);\n    });\n  };\n  useEffect(hook, []);\n  console.log(\"Render\", notes.length, \"notes:\");\n\n  const toggleImportanceOf = (id) => {\n    console.log(`Importance of ${id} needs to be toggled`);\n    const note = notes.find((note) => note.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .updateNote(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `The note '${note.content}' was already removed from server.`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((note) => note.id !== id));\n      });\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    console.log(\"Button Clicked\", event.target);\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() < 0.5,\n    };\n    noteService.createNote(noteObject).then((returnedNote) => {\n      console.log(\"POST response: \", returnedNote);\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n  return (\n    <div>\n      <h1>Notes (Object in Note.js)</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          Show {showAll ? \"Important\" : \"All\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">Save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}